/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file contains protocol buffers that are used for FServerAdminProtocol.

option java_package = "org.apache.wasp.protobuf.generated";
option java_outer_classname = "FServerAdminProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

import "Wasp.proto";

/* Column-level protobufs */

message OpenEntityGroupRequest {
  repeated EntityGroupInfoProtos entityGroup = 1;
  optional uint32 versionOfOfflineNode = 2;
}

message OpenEntityGroupResponse {
  repeated EntityGroupOpeningState openingState = 1;
}

/**
 * Closes the specified entityGroup and will use or not use ZK during the close
 * according to the specified flag.
 */
message CloseEntityGroupRequest {
  required EntityGroupInfoProtos entityGroup = 1;
  optional uint32 versionOfClosingNode = 2;
  optional bool zk = 3 [default = true];;
}

message CloseEntityGroupResponse {
  required bool success = 1;
}

message CloseEncodedEntityGroupRequest {
  required EntityGroupSpecifier entityGroup = 1;
  optional uint32 versionOfClosingNode = 2;
  optional bool zk = 3 [default = true];;
}

message CloseEncodedEntityGroupResponse {
  required bool success = 1;
}

/**
 * Splits the specified entityGroup.
 *
 */
message SplitEntityGroupRequest {
  required EntityGroupSpecifier entityGroup = 1;
  optional bytes splitPoint = 2;
}

message SplitEntityGroupResponse {
}

message DisableTableRequest {
  required string tableName = 1;
}

message DisableTableResponse {
  required bool success = 1;
}

message EnableTableRequest {
  required string tableName = 1;
}

message EnableTableResponse {
  required bool success = 1;
}

message GetEntityGroupInfoRequest {
  required EntityGroupSpecifier entityGroup = 1;
}

message GetEntityGroupInfoResponse {
  required EntityGroupInfoProtos entityGroupInfo = 1;
}

message GetOnlineEntityGroupsRequest {
}

message GetOnlineEntityGroupsResponse {
  repeated EntityGroupInfoProtos entityGroupInfos = 1;
}

message OpenEntityGroupsRequest {
  repeated EntityGroupInfoProtos entityGroupInfos = 1;
}

message OpenEntityGroupsResponse {
}

message StopServerRequest {
  required string reason = 1;
}

message StopServerResponse {
}

message ServerInfo {
  required ServerName serverName = 1;
  optional uint32 webuiPort = 2;
}

message GetServerInfoRequest {
}

message GetServerInfoResponse {
  required ServerInfo serverInfo = 1;
}

service FServerAdminService {
  /** open a entityGroup . */
  rpc openEntityGroup(OpenEntityGroupRequest)
    returns(OpenEntityGroupResponse);

  /** close a entityGroup */
  rpc closeEntityGroup(CloseEntityGroupRequest)
    returns(CloseEntityGroupResponse);
    
    /** close a entityGroup */
  rpc closeEncodedEntityGroup(CloseEncodedEntityGroupRequest)
    returns(CloseEncodedEntityGroupResponse);

  /** Modifies an existing column on the specified table. */
  rpc splitEntityGroup(SplitEntityGroupRequest)
    returns(SplitEntityGroupResponse);
    
  rpc disableServerTable(DisableTableRequest)
  	returns(DisableTableResponse);
  
  rpc enableServerTable(EnableTableRequest)
  	returns(EnableTableResponse);
  	
  rpc getEntityGroupInfo(GetEntityGroupInfoRequest)
  	returns(GetEntityGroupInfoResponse);
  
  rpc getOnlineEntityGroups(GetOnlineEntityGroupsRequest)
  	returns(GetOnlineEntityGroupsResponse);
  	
  rpc openEntityGroups(OpenEntityGroupsRequest)
  	returns(OpenEntityGroupsResponse);
  	
  rpc getServerInfo(GetServerInfoRequest)
    returns(GetServerInfoResponse);

  rpc stopServer(StopServerRequest)
    returns(StopServerResponse);
}