#! /usr/bin/env bash
#
#/**
# * Copyright 2007 The Apache Software Foundation
# *
# * Licensed to the Apache Software Foundation (ASF) under one
# * or more contributor license agreements.  See the NOTICE file
# * distributed with this work for additional information
# * regarding copyright ownership.  The ASF licenses this file
# * to you under the Apache License, Version 2.0 (the
# * "License"); you may not use this file except in compliance
# * with the License.  You may obtain a copy of the License at
# *
# *     http://www.apache.org/licenses/LICENSE-2.0
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS,
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# * See the License for the specific language governing permissions and
# * limitations under the License.
# */
# 
# The wasp command script.  Based on the hbase command script putting
# in wasp classes, libs and configurations ahead of hbase's.
#
# TODO: Narrow the amount of duplicated code.
#
# Environment Variables:
#
#   JAVA_HOME        The java implementation to use.  Overrides JAVA_HOME.
#
#   WASP_CLASSPATH  Extra Java CLASSPATH entries.
#
#   WASP_HEAPSIZE   The maximum amount of heap to use, in MB. 
#                    Default is 1000.
#
#   WASP_LIBRARY_PATH  Wasp additions to JAVA_LIBRARY_PATH for adding
#                    native libaries.
#
#   WASP_OPTS       Extra Java runtime options.
#
#   WASP_CONF_DIR   Alternate conf dir. Default is ${WASP_HOME}/conf.
#
#   WASP_ROOT_LOGGER The root appender. Default is INFO,console
#
#   MAVEN_HOME       Where mvn is installed.
#
#   JRUBY_HOME       JRuby path: $JRUBY_HOME/lib/jruby.jar should exist.
#                    Defaults to the jar packaged with Wasp.
#
#   JRUBY_OPTS       Extra options (eg '--1.9') passed to the wasp shell.
#                    Empty by default.
#
bin=`dirname "$0"`
bin=`cd "$bin">/dev/null; pwd`

# This will set WASP_HOME, etc.
. "$bin"/wasp-config.sh

cygwin=false
case "`uname`" in
CYGWIN*) cygwin=true;;
esac

# Detect if we are in wasp sources dir
in_dev_env=false
if [ -d "${WASP_HOME}/target" ]; then
  in_dev_env=true
fi

# if no args specified, show usage
if [ $# = 0 ]; then
  echo "Usage: wasp <command>"
  echo "where <command> an option from one of these categories:"
  echo ""
  echo "DBA TOOLS"
  echo "  shell            run the Wasp shell"
  echo "  wbck             run the wasp 'fsck' tool"
  echo "  zkcli            run the ZooKeeper shell"
  echo ""
  echo "PROCESS MANAGEMENT"
  echo "  master           run an Wasp FMaster node" 
  echo "  fserver          run an Wasp FServer node" 
  echo "  zookeeper        run a Zookeeper server"
  echo "  rest             run an Wasp REST server" 
  echo "  thrift           run the Wasp Thrift server" 
  echo "  thrift2          run the Wasp Thrift2 server"
  echo ""
  echo "PACKAGE MANAGEMENT"
  echo "  classpath        dump wasp CLASSPATH"
  echo "  version          print the version"
  echo ""
  echo " or"
  echo "  CLASSNAME        run the class named CLASSNAME"
  echo "Most commands print help when invoked w/o parameters."
  exit 1
fi

# get arguments
COMMAND=$1
shift

JAVA=$JAVA_HOME/bin/java
JAVA_HEAP_MAX=-Xmx1000m 

MVN="mvn"
if [ "$MAVEN_HOME" != "" ]; then
  MVN=${MAVEN_HOME}/bin/mvn
fi

# override default settings for this command, if applicable
if [ -f "$WASP_HOME/conf/wasp-env-$COMMAND.sh" ]; then
  . "$WASP_HOME/conf/wasp-env-$COMMAND.sh"
fi

# check envvars which might override default args
if [ "$WASP_HEAPSIZE" != "" ]; then
  #echo "run with heapsize $WASP_HEAPSIZE"
  JAVA_HEAP_MAX="-Xmx""$WASP_HEAPSIZE""m"
  #echo $JAVA_HEAP_MAX
fi

# so that filenames w/ spaces are handled correctly in loops below
ORIG_IFS=$IFS
IFS=

# CLASSPATH initially contains $WASP_CONF_DIR
CLASSPATH="${WASP_CONF_DIR}"
CLASSPATH=${CLASSPATH}:$JAVA_HOME/lib/tools.jar

add_to_cp_if_exists() {
  if [ -d "$@" ]; then
    CLASSPATH=${CLASSPATH}:"$@"
  fi
}

# For releases, add wasp & webapps to CLASSPATH
# Webapps must come first else it messes up Jetty
if [ -d "$WASP_HOME/wasp-webapps" ]; then
  add_to_cp_if_exists "${WASP_HOME}"
fi
#add if we are in a dev environment
if [ -d "$WASP_HOME/wasp-server/target/wasp-webapps" ]; then
  add_to_cp_if_exists "${WASP_HOME}/wasp-server/target"
fi

add_maven_deps_to_classpath() {
  # Need to generate classpath from maven pom. This is costly so generate it
  # and cache it. Save the file into our target dir so a mvn clean will get
  # clean it up and force us create a new one.
  f="${WASP_HOME}/target/cached_classpath.txt"
  if [ ! -f "${f}" ]
  then
    ${MVN} -f "${WASP_HOME}/pom.xml" package dependency:build-classpath -DskipTests -Dmdep.outputFile="${f}" &> /dev/null
  fi
  CLASSPATH=${CLASSPATH}:`cat "${f}"`
}


add_maven_main_classes_to_classpath() {
 # assumes all modules are named wasp-* in the top level directory
  IFS=$ORIG_IFS
  for module in `ls $WASP_HOME | grep 'wasp-*'`
  do
    add_to_cp_if_exists "$WASP_HOME/$module/target/classes"
  done
}

add_maven_test_classes_to_classpath(){
 # assumes all modules are named wasp-* in the top level directory
  IFS=$ORIG_IFS
  for module in `ls $WASP_HOME | grep 'wasp-*'`
  do
    add_to_cp_if_exists "$WASP_HOME/$module/target/test-classes"
  done
}

#Add the development env class path stuff
if $in_dev_env; then
  add_maven_main_classes_to_classpath
  add_maven_test_classes_to_classpath
  add_maven_deps_to_classpath
fi

#add the wasp jars for each module
for f in $WASP_HOME/wasp*.jar; do
  if [[ $f = *sources.jar ]]
  then
    : # Skip sources.jar
  elif [ -f $f ]
  then
    CLASSPATH=${CLASSPATH}:$f;
  fi
done

# Add libs to CLASSPATH
for f in $WASP_HOME/lib/*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done

# Add user-specified CLASSPATH last
if [ "$WASP_CLASSPATH" != "" ]; then
  CLASSPATH=${CLASSPATH}:${WASP_CLASSPATH}
fi

# default log directory & file
if [ "$WASP_LOG_DIR" = "" ]; then
  WASP_LOG_DIR="$WASP_HOME/logs"
fi
if [ "$WASP_LOGFILE" = "" ]; then
  WASP_LOGFILE='wasp.log'
fi

# cygwin path translation
if $cygwin; then
  CLASSPATH=`cygpath -p -w "$CLASSPATH"`
  WASP_HOME=`cygpath -d "$WASP_HOME"`
  WASP_LOG_DIR=`cygpath -d "$WASP_LOG_DIR"`
fi

function append_path() {
  if [ -z "$1" ]; then
    echo $2
  else
    echo $1:$2
  fi
}

JAVA_PLATFORM=""

#If avail, add HBase to the CLASSPATH and to the JAVA_LIBRARY_PATH
HBASE_IN_PATH=$(PATH="${HBASE_HOME:-${HBASE_PREFIX}}/bin:$PATH" which hbase 2>/dev/null)
if [ -f ${HBASE_IN_PATH} ]; then
  HBASE_JAVA_LIBRARY_PATH=$(HBASE_CLASSPATH="$CLASSPATH" ${HBASE_IN_PATH} \
                             org.apache.hadoop.hbase.util.GetJavaProperty java.library.path 2>/dev/null)
  if [ -n "$HBASE_JAVA_LIBRARY_PATH" ]; then
    JAVA_LIBRARY_PATH=$(append_path "${JAVA_LIBRARY_PATH}" "$HBASE_JAVA_LIBRARY_PATH")
  fi
  CLASSPATH=$(append_path "${CLASSPATH}" `${HBASE_IN_PATH} classpath 2>/dev/null`)
fi

if [ -d "${WASP_HOME}/build/native" -o -d "${WASP_HOME}/lib/native" ]; then
  if [ -z $JAVA_PLATFORM ]; then
    JAVA_PLATFORM=`CLASSPATH=${CLASSPATH} ${JAVA} org.apache.hadoop.util.PlatformName | sed -e "s/ /_/g"`
  fi
  if [ -d "$WASP_HOME/build/native" ]; then
    JAVA_LIBRARY_PATH=$(append_path "$JAVA_LIBRARY_PATH" ${WASP_HOME}/build/native/${JAVA_PLATFORM}/lib)
  fi

  if [ -d "${WASP_HOME}/lib/native" ]; then
    JAVA_LIBRARY_PATH=$(append_path "$JAVA_LIBRARY_PATH" ${WASP_HOME}/lib/native/${JAVA_PLATFORM})
  fi
fi

# cygwin path translation
if $cygwin; then
  JAVA_LIBRARY_PATH=`cygpath -p "$JAVA_LIBRARY_PATH"`
fi
 
# restore ordinary behaviour
unset IFS

# figure out which class to run
if [ "$COMMAND" = "shell" ] ; then
  # eg export JRUBY_HOME=/usr/local/share/jruby
  if [ "$JRUBY_HOME" != "" ] ; then
    CLASSPATH="$JRUBY_HOME/lib/jruby.jar:$CLASSPATH"
    WASP_OPTS="$WASP_OPTS -Djruby.home=$JRUBY_HOME -Djruby.lib=$JRUBY_HOME/lib"
  fi
  #find the wasp ruby sources
  if [ -d "$WASP_HOME/lib/ruby" ]; then
    WASP_OPTS="$WASP_OPTS -Dwasp.ruby.sources=$WASP_HOME/lib/ruby"
  else
    WASP_OPTS="$WASP_OPTS -Dwasp.ruby.sources=$WASP_HOME/wasp-server/src/main/ruby"
  fi
  CLASS="org.jruby.Main -X+O ${JRUBY_OPTS} ${WASP_HOME}/bin/wirb.rb"
elif [ "$COMMAND" = "wbck" ] ; then
  CLASS='org.apache.wasp.util.WaspFsck'
elif [ "$COMMAND" = "zkcli" ] ; then
  # ZooKeeperMainServerArg returns '-server HOST:PORT' or empty string.
  SERVER_ARG=`"$bin"/wasp org.apache.wasp.zookeeper.ZooKeeperMainServerArg`
  CLASS="org.apache.zookeeper.ZooKeeperMain ${SERVER_ARG}"

elif [ "$COMMAND" = "master" ] ; then
  CLASS='org.apache.wasp.master.FMaster'
  if [ "$1" != "stop" ] ; then
    WASP_OPTS="$WASP_OPTS $WASP_MASTER_OPTS"
  fi
elif [ "$COMMAND" = "fserver" ] ; then
  CLASS='org.apache.wasp.fserver.FServer'
  if [ "$1" != "stop" ] ; then
    WASP_OPTS="$WASP_OPTS $WASP_FSERVER_OPTS"
  fi
elif [ "$COMMAND" = "thrift" ] ; then
  CLASS='org.apache.wasp.thrift.ThriftServer'
  if [ "$1" != "stop" ] ; then
    WASP_OPTS="$WASP_OPTS $WASP_THRIFT_OPTS"
  fi
elif [ "$COMMAND" = "thrift2" ] ; then
  CLASS='org.apache.wasp.thrift2.ThriftServer'
  if [ "$1" != "stop" ] ; then
    WASP_OPTS="$WASP_OPTS $WASP_THRIFT_OPTS"
  fi
elif [ "$COMMAND" = "rest" ] ; then
  CLASS='org.apache.wasp.rest.Main'
  if [ "$1" != "stop" ] ; then
    WASP_OPTS="$WASP_OPTS $WASP_REST_OPTS"
  fi
elif [ "$COMMAND" = "zookeeper" ] ; then
  CLASS='org.apache.wasp.zookeeper.FQuorumPeer'
  if [ "$1" != "stop" ] ; then
    WASP_OPTS="$WASP_OPTS $WASP_ZOOKEEPER_OPTS"
  fi

elif [ "$COMMAND" = "classpath" ] ; then
  echo $CLASSPATH
  exit 0
elif [ "$COMMAND" = "version" ] ; then
  CLASS='org.apache.wasp.util.VersionInfo'
else
  CLASS=$COMMAND
fi

# Have JVM dump heap if we run out of memory.  Files will be 'launch directory'
# and are named like the following: java_pid21612.hprof. Apparently it doesn't
# 'cost' to have this flag enabled. Its a 1.6 flag only. See:
# http://blogs.sun.com/alanb/entry/outofmemoryerror_looks_a_bit_better
WASP_OPTS="$WASP_OPTS -Dwasp.log.dir=$WASP_LOG_DIR"
WASP_OPTS="$WASP_OPTS -Dwasp.log.file=$WASP_LOGFILE"
WASP_OPTS="$WASP_OPTS -Dwasp.home.dir=$WASP_HOME"
WASP_OPTS="$WASP_OPTS -Dwasp.id.str=$WASP_IDENT_STRING"
WASP_OPTS="$WASP_OPTS -Dwasp.root.logger=${WASP_ROOT_LOGGER:-INFO,console}"
if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
  WASP_OPTS="$WASP_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH"
  export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$JAVA_LIBRARY_PATH"
fi

# Enable security logging on the master and fserver only
if [ "$COMMAND" = "master" ] || [ "$COMMAND" = "fserver" ]; then
  WASP_OPTS="$WASP_OPTS -Dwasp.security.logger=${WASP_SECURITY_LOGGER:-INFO,RFAS}"
else
  WASP_OPTS="$WASP_OPTS -Dwasp.security.logger=${WASP_SECURITY_LOGGER:-INFO,NullAppender}"
fi

# Exec unless WASP_NOEXEC is set.
if [ "${WASP_NOEXEC}" != "" ]; then
  "$JAVA" -Dproc_$COMMAND -XX:OnOutOfMemoryError="kill -9 %p" $JAVA_HEAP_MAX $WASP_OPTS -classpath "$CLASSPATH" $CLASS "$@"
else
  exec "$JAVA" -Dproc_$COMMAND -XX:OnOutOfMemoryError="kill -9 %p" $JAVA_HEAP_MAX $WASP_OPTS -classpath "$CLASSPATH" $CLASS "$@"
fi
