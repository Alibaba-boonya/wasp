/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file contains protocol buffers that are used for FServerStatusProtocol.

option java_package = "org.apache.wasp.protobuf.generated";
option java_outer_classname = "FServerStatusProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

import "Wasp.proto";

message FServerStartupRequest {
  /** Port number this fserver is up on */
  required uint32 port = 1;

  /** This servers' startcode */
  required uint64 serverStartCode = 2;

  /** Current time of the fserver in ms */
  required uint64 serverCurrentTime = 3;
}

message FServerStartupResponse {
  /**
   * Configuration for the fserver to use: e.g. filesystem,
   * wasp rootdir, the hostname to use creating the FServer ServerName,
   * etc
   */
  repeated StringStringPair mapEntries = 1;
}

message FServerReportRequest {
  required ServerName server = 1;

  /** load the server is under */
  optional ServerLoadProtos load = 2;
}

message FServerReportResponse {
}

message ReportRSFatalErrorRequest {
  /** name of the server experiencing the error */
  required ServerName server = 1;

  /** informative text to expose in the master logs and UI */
  required string errorMessage = 2;
}

message ReportRSFatalErrorResponse {
}

message GetLastFlushedSequenceIdRequest {
  /** entityGroup name */
  required bytes entityGroupName = 1;
}

message GetLastFlushedSequenceIdResponse {
  required uint64 lastFlushedSequenceId = 1;
}

service FServerStatusService {
  /** Called when a fserver first starts. */
  rpc fServerStartup(FServerStartupRequest)
    returns(FServerStartupResponse);

  /** Called to report the load the FServer is under. */
  rpc fServerReport(FServerReportRequest)
    returns(FServerReportResponse);

  /**
   * Called by a fserver to report a fatal error that is causing it to
   * abort.
   */
  rpc reportRSFatalError(ReportRSFatalErrorRequest)
    returns(ReportRSFatalErrorResponse);
}
